// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String  @id
  nickname String  @unique
  name     String
  email    String? @unique
  password String?
  image    String?
  timezone String
  role     Role    @default(USER)

  createdAt DateTime @default(now())

  sessions Session[]
  accounts Account[]
  events   EventAnnouncement[]
  responses EventResponse[]
  invitationToken InvitationToken?
}

model InvitationToken {
  id              String    @id @default(uuid())
  token           String    @unique
  adminNickname   String
  userNickname    String?
  expiresAt       DateTime
  used            Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  user            User?     @relation(fields: [userId], references: [id])
  userId          String?   @unique
  createdBy       String

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ResponseType {
  ACCEPT
  DECLINE
}

model EventAnnouncement {
  id          String   @id @default(uuid())
  title       String
  description String
  dayOfWeek   DayOfWeek
  timeGmt     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   User     @relation(fields: [userId], references: [id])
  userId      String

  responses   EventResponse[]

  @@map("event_announcements")
}

model EventResponse {
  id        String       @id @default(uuid())
  response  ResponseType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user      User             @relation(fields: [userId], references: [id])
  userId    String
  event     EventAnnouncement @relation(fields: [eventId], references: [id])
  eventId   String

  @@unique([userId, eventId])
  @@map("event_responses")
}

model Account {
  id         String @id
  provider   String
  providerId String

  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}