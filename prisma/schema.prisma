// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String  @id
  nickname String  @unique
  email    String? @unique
  password String?
  image    String?
  timezone String
  role     Role    @default(USER)

  createdAt DateTime @default(now())

  sessions         Session[]
  accounts         Account[]
  events           EventAnnouncement[]
  responses        EventResponse[]
  invitationToken  InvitationToken?
  announcements    Announcement[]
  pollVotes        PollVote[]
  Poll             Poll[]
  TimeSlotResponse TimeSlotResponse[]
  UserSession      UserSession[]
}

model InvitationToken {
  id            String   @id @default(uuid())
  token         String   @unique
  adminNickname String
  userNickname  String?
  expiresAt     DateTime
  used          Boolean  @default(false)
  createdAt     DateTime @default(now())

  user      User?   @relation(fields: [userId], references: [id])
  userId    String? @unique
  createdBy String

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ResponseType {
  ACCEPTED
  DECLINED
}

model EventAnnouncement {
  id          String    @id @default(uuid())
  title       String
  description String
  dayOfWeek   DayOfWeek
  timeGmt     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  createdBy User   @relation(fields: [userId], references: [id])
  userId    String

  responses EventResponse[]

  @@map("event_announcements")
}

model EventResponse {
  id        String       @id @default(uuid())
  response  ResponseType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user    User              @relation(fields: [userId], references: [id])
  userId  String
  event   EventAnnouncement @relation(fields: [eventId], references: [id])
  eventId String

  @@unique([userId, eventId])
  @@map("event_responses")
}

model Account {
  id         String @id
  provider   String
  providerId String

  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy User   @relation(fields: [userId], references: [id])
  userId    String

  @@map("announcements")
}

model Poll {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  type        PollType @default(REGULAR)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy User       @relation(fields: [userId], references: [id])
  userId    String
  votes     PollVote[]
  timeSlots TimeSlot[]

  @@map("polls")
}

enum PollType {
  REGULAR
  TIME
}

model TimeSlot {
  id        String             @id @default(uuid())
  dayOfWeek DayOfWeek
  timeGmt   String
  poll      Poll               @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId    String
  responses TimeSlotResponse[]

  @@unique([pollId, dayOfWeek, timeGmt])
  @@map("time_slots")
}

model TimeSlotResponse {
  id        String   @id @default(uuid())
  available Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  userId     String
  timeSlot   TimeSlot @relation(fields: [timeSlotId], references: [id])
  timeSlotId String

  @@unique([userId, timeSlotId])
  @@map("time_slot_responses")
}

model PollVote {
  id        String   @id @default(uuid())
  vote      Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
  poll   Poll   @relation(fields: [pollId], references: [id])
  pollId String

  @@unique([userId, pollId])
  @@map("poll_votes")
}

model UserDevice {
  id             String   @id @default(uuid())
  userAgent      String   @unique
  browserName    String?
  browserVersion String?
  osName         String?
  osVersion      String?
  deviceType     String?
  createdAt      DateTime @default(now())
  lastSeenAt     DateTime @default(now())

  sessions UserSession[]

  @@map("user_devices")
}

model UserSession {
  id          String   @id @default(uuid())
  userId      String
  deviceId    String
  ipAddress   String?
  countryCode String?
  region      String?
  city        String?
  language    String?
  createdAt   DateTime @default(now())

  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  device UserDevice @relation(fields: [deviceId], references: [id])

  @@map("user_sessions")
}
